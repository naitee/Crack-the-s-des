#Permutation 10 bit
def P10(key):
    P10_0 = key[2]
    P10_1 = key[4]
    P10_2 = key[1]
    P10_3 = key[6]
    P10_4 = key[3]
    P10_5 = key[9]
    P10_6 = key[0]
    P10_7 = key[8]
    P10_8 = key[7]
    P10_9 = key[5]
    P10_output = P10_0+P10_1+P10_2+P10_3+P10_4+P10_5+P10_6+P10_7+P10_8+P10_9
    return P10_output

#Permutation 8 bit
def P8(input):
    P8_0 = input[5]
    P8_1 = input[2]
    P8_2 = input[6]
    P8_3 = input[3]
    P8_4 = input[7]
    P8_5 = input[4]
    P8_6 = input[9]
    P8_7 = input[8]
    P8_output = P8_0+P8_1+P8_2+P8_3+P8_4+P8_5+P8_6+P8_7
    return P8_output

#ManualLeftShift
def Leftshift(bin):
    ls1 = bin[1]
    ls2 = bin[2]
    ls3 = bin[3]
    ls4 = bin[4]
    ls5 = bin[0]
    output = ls1+ls2+ls3+ls4+ls5
    return output

#Initial_Permutation 
def ip(input):
    ip_0 = input[1]
    ip_1 = input[5]
    ip_2 = input[2]
    ip_3 = input[0]
    ip_4 = input[3]
    ip_5 = input[7]
    ip_6 = input[4]
    ip_7 = input[6]
    ip_output = ip_0 + ip_1 + ip_2 + ip_3 + ip_4 + ip_5 + ip_6 + ip_7
    return ip_output

#Initial_Permutation 
def ip_re(input):
    ip_0 = input[3]
    ip_1 = input[0]
    ip_2 = input[2]
    ip_3 = input[4]
    ip_4 = input[6]
    ip_5 = input[1]
    ip_6 = input[7]
    ip_7 = input[5]
    ip_re_output = ip_0 + ip_1 + ip_2 + ip_3 + ip_4 + ip_5 + ip_6 + ip_7
    return ip_re_output

#Expand and permutation 
def ep(input):
    ep_0 = input[3]
    ep_1 = input[0]
    ep_2 = input[1]
    ep_3 = input[2]
    ep_4 = input[1]
    ep_5 = input[2]
    ep_6 = input[3]
    ep_7 = input[0]
    ep_output = ep_0 + ep_1 + ep_2 + ep_3 + ep_4 + ep_5 + ep_6 + ep_7
    return ep_output

#S-box : S0
def s0(input):
        first = int(input[0],2)*2 + int(input[3],2)*1
        last = int(input[1],2)*2 + int(input[2],2)*1
        Arr_s0 = np.array((["01","00","11","10"],
                    ["11","00","01","00"],
                    ["00","10","01","11"],
                    ["11","01","11","10"]))
        return Arr_s0[first][last]
    
#S-box : S1
def s1(input):
        first = int(input[0],2)*2 + int(input[3],2)*1
        last = int(input[1],2)*2 + int(input[2],2)*1
        Arr_s1 = np.array((["00","01","10","11"],
                    ["10","00","01","11"],
                    ["11","00","01","00"],
                    ["10","01","00","11"]))
        return Arr_s1[first][last]
   
#permutation 4 bit 
def P4(input):
    p4_0 = input[1]
    p4_1 = input[3]
    p4_2 = input[2]
    p4_3 = input[0]
    p4_output = p4_0 + p4_1 + p4_2 + p4_3 
    return p4_output

def sdes(input_list):
    ##S-des encryption
    Cipher_output = ""
    fill_bin = ""
    for j in range(len(input_list)-1):
        pl = ip(input_list[j+1])
        #Break half
        Lip_bit = pl[:4]
        Rip_bit = pl[4:]

        #Rip_bit in e/p
        f_ep = ep(Rip_bit)

        #ep_xor_key1
        intep = int(f_ep,2) 
        intkey1 = int(Key2,2)
        intxor_out = intep ^ intkey1
        bixor = bin(intxor_out)

        #break-half
        p1_xor = bixor[2:10]
        p2_xor1 = p1_xor.zfill(8)
        Lip_xor1 = p2_xor1[:4]
        Rip_xor1 = p2_xor1[4:]


        #S-box section
        s0_out = s0(Lip_xor1)
        s1_out = s1(Rip_xor1)
        B_first_P4 = s0_out + s1_out

        #first P4
        first_P4 = P4(B_first_P4)

        #first_p4_xor
        int_first_P4 = int(first_P4,2)
        int_Lip_bit = int(Lip_bit,2)
        int_first_p4_xor = int_Lip_bit ^ int_first_P4
        first_p4_xor = bin(int_first_p4_xor)

        #Switching
        b_left_sw = first_p4_xor[2:6]
        left_sw = b_left_sw.zfill(4)                
        sw_output = Rip_bit + left_sw 


        #break-half after switching
        Lsw_bit = sw_output[:4]
        Rsw_bit = sw_output[4:]

        #Second Expand and permutation
        Rsw_ep = ep(Rsw_bit)

        #Second xor w/ Key2
        intep2 = int(Rsw_ep,2) 
        intkey2 = int(Key1,2)
        intxor2_out = intep2 ^ intkey2
        bixor2 = bin(intxor2_out)

        #Break-half afre second xor
        p1_xor2 = bixor2[2:10]
        p2_xor2 = p1_xor2.zfill(8)
        Lip_xor2 = p2_xor2[:4]
        Rip_xor2 = p2_xor2[4:] 


        #S-box section
        s0_out2 = s0(Lip_xor2)
        s1_out2 = s1(Rip_xor2)
        B_second_P4 = s0_out2 + s1_out2

        #Second P4
        second_P4 = P4(B_second_P4)
        #second_p4_xor
        int_second_P4 = int(second_P4,2)
        int_Lsw_bit = int(Lsw_bit,2)
        int_second_p4_xor = int_Lsw_bit ^ int_second_P4
        second_p4_xor = bin(int_second_p4_xor)

        #Break-half afre last xor
        b_left_ip = second_p4_xor[2:6]
        left_ip1 = b_left_ip.zfill(4)

        #Combine before inverse initial permutation
        last_combine = left_ip1 + Rsw_bit
        #Inverse initial permutation
        ciphertext = ip(last_combine)
        INTciphertext = int(ciphertext,2)
        Biciphertext = bin(INTciphertext)
        sl_BIcipher = Biciphertext[2:]
        fill_bin = sl_BIcipher.zfill(8)
        Cipher_output = Cipher_output + "," + fill_bin
    return Cipher_output

import numpy as np
import datetime



##Generated key pattern
for key_number in range(2**10):
    s_Key = bin(key_number)
    sl_s_key = s_Key[2:]
    ready_key = sl_s_key.zfill(10)
    ########Key1 Generated
    P10_output = P10(ready_key)
    #Break-half 
    L_Bit = P10_output[:5]
    R_Bit = P10_output[5:]
    #Left_Round_Shift
    LLS_1 = Leftshift(L_Bit)
    RLS_1 = Leftshift(R_Bit)
    ##Key1
    BKey1 = LLS_1+RLS_1
    Key1 = P8(BKey1)
    ########Key2 Generated
    #2Left_Round_Shift
    LLS_2 = Leftshift(Leftshift(LLS_1))
    RLS_2 = Leftshift(Leftshift(RLS_1))
    #Key2
    BKey2 = LLS_2 + RLS_2
    Key2 = P8(BKey2)

###############################################################################Encrypt
    plaintext = "590610626"
    list_test = ""
    output = ""

    ##string to ascii
    for i in range (len(plaintext)):
        ascii_s = bin(ord(plaintext[i]))
        slice_ascii = ascii_s[2:]
        sl_bi = slice_ascii.zfill(8)
        output = output + "," + sl_bi
        output_real = output[1:]
        list_test = output_real.split(",")    
    

    check = ",0b11001101,0b11000011,0b10111001,0b11110111,0b1101000,0b10111001,0b11110111,0b10110110,0b11110111,0b10110110,0b11001101,0b1101000,0b11110111,0b10110110,0b10111001,0b1101000,0b10110110,0b10110110,0b1100011,0b11110111,0b11001101,0b10110110,0b110,0b11000011,0b1010111,0b111000,0b1101000,0b11000011,0b11110111,0b11110111,0b10110110,0b11001101,0b10110110,0b10110110,0b11001101,0b10111001,0b11001101,0b10111001,0b11001101,0b111000,0b10111001,0b1101000,0b10110110,0b1101000,0b11000011,0b10110110,0b1101000,0b1101000,0b11000011,0b10111001,0b111000,0b1101000,0b1101000,0b10111001,0b110,0b111000,0b110,0b11000011,0b1100011,0b11001101,0b10111001,0b1010111,0b11001101,0b111000,0b1010111,0b10110110,0b1010111,0b10110110,0b1010111,0b1101000,0b11000011,0b1010111,0b10110110,0b10110110,0b10111001,0b1100011,0b11110111"
    rea_check = check.split(",0b")
    combine_rea = ""
    for k in range(1,len(rea_check)):
        if (len(rea_check[k]) != 8 ):
            rea_check[k] = rea_check[k].zfill(8)
        combine_rea = combine_rea + "," + rea_check[k]
    ################################decrypt
    sl_combine = combine_rea.split(",")
    sl_cipher = ""
    for i in range (len(sl_combine)-1):   
        dc_output = sdes(sl_combine)
    
    test = ""
    sl_cipher = dc_output.split(",")
    for s in range(10):
        test = test + "," + sl_cipher[s]
    sl_test = test.split(",")
    del sl_test[0]
    del sl_test[0]
    print ("key",key_number)
    print ("ready_key",ready_key)
    print ("k1",Key1)
    print ("k2",Key2)
    print ("plain",list_test)
    print ("dc_sl",sl_test)
    #print (sl_cipher)
    
    print ("====================")
    
    if (list_test == sl_test):
        print ("**********************")
        print ("key_number",key_number)
        print ("ready_key",ready_key)
        print ("plain",sl_cipher)
        print ("**********************")
        break
